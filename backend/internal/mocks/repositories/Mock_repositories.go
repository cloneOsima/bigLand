// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositories

import (
	"context"

	"github.com/cloneOsima/bigLand/backend/internal/sqlc"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPostRepository creates a new instance of MockPostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostRepository {
	mock := &MockPostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostRepository is an autogenerated mock type for the PostRepository type
type MockPostRepository struct {
	mock.Mock
}

type MockPostRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostRepository) EXPECT() *MockPostRepository_Expecter {
	return &MockPostRepository_Expecter{mock: &_m.Mock}
}

// InsertNewPost provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) InsertNewPost(dbCtx context.Context, info sqlc.InsertNewPostParams) error {
	ret := _mock.Called(dbCtx, info)

	if len(ret) == 0 {
		panic("no return value specified for InsertNewPost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.InsertNewPostParams) error); ok {
		r0 = returnFunc(dbCtx, info)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostRepository_InsertNewPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertNewPost'
type MockPostRepository_InsertNewPost_Call struct {
	*mock.Call
}

// InsertNewPost is a helper method to define mock.On call
//   - dbCtx context.Context
//   - info sqlc.InsertNewPostParams
func (_e *MockPostRepository_Expecter) InsertNewPost(dbCtx interface{}, info interface{}) *MockPostRepository_InsertNewPost_Call {
	return &MockPostRepository_InsertNewPost_Call{Call: _e.mock.On("InsertNewPost", dbCtx, info)}
}

func (_c *MockPostRepository_InsertNewPost_Call) Run(run func(dbCtx context.Context, info sqlc.InsertNewPostParams)) *MockPostRepository_InsertNewPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.InsertNewPostParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.InsertNewPostParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostRepository_InsertNewPost_Call) Return(err error) *MockPostRepository_InsertNewPost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostRepository_InsertNewPost_Call) RunAndReturn(run func(dbCtx context.Context, info sqlc.InsertNewPostParams) error) *MockPostRepository_InsertNewPost_Call {
	_c.Call.Return(run)
	return _c
}

// SelectPostInfo provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) SelectPostInfo(ctx context.Context, postID uuid.UUID) (sqlc.SelectPostInfoRow, error) {
	ret := _mock.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for SelectPostInfo")
	}

	var r0 sqlc.SelectPostInfoRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (sqlc.SelectPostInfoRow, error)); ok {
		return returnFunc(ctx, postID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) sqlc.SelectPostInfoRow); ok {
		r0 = returnFunc(ctx, postID)
	} else {
		r0 = ret.Get(0).(sqlc.SelectPostInfoRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepository_SelectPostInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectPostInfo'
type MockPostRepository_SelectPostInfo_Call struct {
	*mock.Call
}

// SelectPostInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - postID uuid.UUID
func (_e *MockPostRepository_Expecter) SelectPostInfo(ctx interface{}, postID interface{}) *MockPostRepository_SelectPostInfo_Call {
	return &MockPostRepository_SelectPostInfo_Call{Call: _e.mock.On("SelectPostInfo", ctx, postID)}
}

func (_c *MockPostRepository_SelectPostInfo_Call) Run(run func(ctx context.Context, postID uuid.UUID)) *MockPostRepository_SelectPostInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostRepository_SelectPostInfo_Call) Return(selectPostInfoRow sqlc.SelectPostInfoRow, err error) *MockPostRepository_SelectPostInfo_Call {
	_c.Call.Return(selectPostInfoRow, err)
	return _c
}

func (_c *MockPostRepository_SelectPostInfo_Call) RunAndReturn(run func(ctx context.Context, postID uuid.UUID) (sqlc.SelectPostInfoRow, error)) *MockPostRepository_SelectPostInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SelectPosts provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) SelectPosts(ctx context.Context) ([]sqlc.SelectPostsRow, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SelectPosts")
	}

	var r0 []sqlc.SelectPostsRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]sqlc.SelectPostsRow, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []sqlc.SelectPostsRow); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.SelectPostsRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepository_SelectPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectPosts'
type MockPostRepository_SelectPosts_Call struct {
	*mock.Call
}

// SelectPosts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPostRepository_Expecter) SelectPosts(ctx interface{}) *MockPostRepository_SelectPosts_Call {
	return &MockPostRepository_SelectPosts_Call{Call: _e.mock.On("SelectPosts", ctx)}
}

func (_c *MockPostRepository_SelectPosts_Call) Run(run func(ctx context.Context)) *MockPostRepository_SelectPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostRepository_SelectPosts_Call) Return(selectPostsRows []sqlc.SelectPostsRow, err error) *MockPostRepository_SelectPosts_Call {
	_c.Call.Return(selectPostsRows, err)
	return _c
}

func (_c *MockPostRepository_SelectPosts_Call) RunAndReturn(run func(ctx context.Context) ([]sqlc.SelectPostsRow, error)) *MockPostRepository_SelectPosts_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// DeleteAccount provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) DeleteAccount() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_DeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccount'
type MockUserRepository_DeleteAccount_Call struct {
	*mock.Call
}

// DeleteAccount is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) DeleteAccount() *MockUserRepository_DeleteAccount_Call {
	return &MockUserRepository_DeleteAccount_Call{Call: _e.mock.On("DeleteAccount")}
}

func (_c *MockUserRepository_DeleteAccount_Call) Run(run func()) *MockUserRepository_DeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_DeleteAccount_Call) Return(err error) *MockUserRepository_DeleteAccount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_DeleteAccount_Call) RunAndReturn(run func() error) *MockUserRepository_DeleteAccount_Call {
	_c.Call.Return(run)
	return _c
}

// InsertNewAccount provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) InsertNewAccount(dbCtx context.Context, newAccount sqlc.InsertNewAccountParams) (sqlc.SelectUserRow, error) {
	ret := _mock.Called(dbCtx, newAccount)

	if len(ret) == 0 {
		panic("no return value specified for InsertNewAccount")
	}

	var r0 sqlc.SelectUserRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.InsertNewAccountParams) (sqlc.SelectUserRow, error)); ok {
		return returnFunc(dbCtx, newAccount)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.InsertNewAccountParams) sqlc.SelectUserRow); ok {
		r0 = returnFunc(dbCtx, newAccount)
	} else {
		r0 = ret.Get(0).(sqlc.SelectUserRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.InsertNewAccountParams) error); ok {
		r1 = returnFunc(dbCtx, newAccount)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_InsertNewAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertNewAccount'
type MockUserRepository_InsertNewAccount_Call struct {
	*mock.Call
}

// InsertNewAccount is a helper method to define mock.On call
//   - dbCtx context.Context
//   - newAccount sqlc.InsertNewAccountParams
func (_e *MockUserRepository_Expecter) InsertNewAccount(dbCtx interface{}, newAccount interface{}) *MockUserRepository_InsertNewAccount_Call {
	return &MockUserRepository_InsertNewAccount_Call{Call: _e.mock.On("InsertNewAccount", dbCtx, newAccount)}
}

func (_c *MockUserRepository_InsertNewAccount_Call) Run(run func(dbCtx context.Context, newAccount sqlc.InsertNewAccountParams)) *MockUserRepository_InsertNewAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sqlc.InsertNewAccountParams
		if args[1] != nil {
			arg1 = args[1].(sqlc.InsertNewAccountParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_InsertNewAccount_Call) Return(selectUserRow sqlc.SelectUserRow, err error) *MockUserRepository_InsertNewAccount_Call {
	_c.Call.Return(selectUserRow, err)
	return _c
}

func (_c *MockUserRepository_InsertNewAccount_Call) RunAndReturn(run func(dbCtx context.Context, newAccount sqlc.InsertNewAccountParams) (sqlc.SelectUserRow, error)) *MockUserRepository_InsertNewAccount_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Login() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserRepository_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) Login() *MockUserRepository_Login_Call {
	return &MockUserRepository_Login_Call{Call: _e.mock.On("Login")}
}

func (_c *MockUserRepository_Login_Call) Run(run func()) *MockUserRepository_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_Login_Call) Return(err error) *MockUserRepository_Login_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Login_Call) RunAndReturn(run func() error) *MockUserRepository_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Logout() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockUserRepository_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) Logout() *MockUserRepository_Logout_Call {
	return &MockUserRepository_Logout_Call{Call: _e.mock.On("Logout")}
}

func (_c *MockUserRepository_Logout_Call) Run(run func()) *MockUserRepository_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_Logout_Call) Return(err error) *MockUserRepository_Logout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Logout_Call) RunAndReturn(run func() error) *MockUserRepository_Logout_Call {
	_c.Call.Return(run)
	return _c
}
