// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositories

import (
	"context"

	"github.com/cloneOsima/bigLand/backend/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPostRepository creates a new instance of MockPostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostRepository {
	mock := &MockPostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostRepository is an autogenerated mock type for the PostRepository type
type MockPostRepository struct {
	mock.Mock
}

type MockPostRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostRepository) EXPECT() *MockPostRepository_Expecter {
	return &MockPostRepository_Expecter{mock: &_m.Mock}
}

// GetPosts provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) GetPosts(ctx context.Context) ([]models.Posts, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 []models.Posts
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Posts, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Posts); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Posts)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepository_GetPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPosts'
type MockPostRepository_GetPosts_Call struct {
	*mock.Call
}

// GetPosts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPostRepository_Expecter) GetPosts(ctx interface{}) *MockPostRepository_GetPosts_Call {
	return &MockPostRepository_GetPosts_Call{Call: _e.mock.On("GetPosts", ctx)}
}

func (_c *MockPostRepository_GetPosts_Call) Run(run func(ctx context.Context)) *MockPostRepository_GetPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostRepository_GetPosts_Call) Return(postss []models.Posts, err error) *MockPostRepository_GetPosts_Call {
	_c.Call.Return(postss, err)
	return _c
}

func (_c *MockPostRepository_GetPosts_Call) RunAndReturn(run func(ctx context.Context) ([]models.Posts, error)) *MockPostRepository_GetPosts_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// DeleteAccount provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) DeleteAccount() {
	_mock.Called()
	return
}

// MockUserRepository_DeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccount'
type MockUserRepository_DeleteAccount_Call struct {
	*mock.Call
}

// DeleteAccount is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) DeleteAccount() *MockUserRepository_DeleteAccount_Call {
	return &MockUserRepository_DeleteAccount_Call{Call: _e.mock.On("DeleteAccount")}
}

func (_c *MockUserRepository_DeleteAccount_Call) Run(run func()) *MockUserRepository_DeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_DeleteAccount_Call) Return() *MockUserRepository_DeleteAccount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserRepository_DeleteAccount_Call) RunAndReturn(run func()) *MockUserRepository_DeleteAccount_Call {
	_c.Run(run)
	return _c
}

// Login provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Login() {
	_mock.Called()
	return
}

// MockUserRepository_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserRepository_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) Login() *MockUserRepository_Login_Call {
	return &MockUserRepository_Login_Call{Call: _e.mock.On("Login")}
}

func (_c *MockUserRepository_Login_Call) Run(run func()) *MockUserRepository_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_Login_Call) Return() *MockUserRepository_Login_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserRepository_Login_Call) RunAndReturn(run func()) *MockUserRepository_Login_Call {
	_c.Run(run)
	return _c
}

// Logout provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Logout() {
	_mock.Called()
	return
}

// MockUserRepository_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockUserRepository_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) Logout() *MockUserRepository_Logout_Call {
	return &MockUserRepository_Logout_Call{Call: _e.mock.On("Logout")}
}

func (_c *MockUserRepository_Logout_Call) Run(run func()) *MockUserRepository_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_Logout_Call) Return() *MockUserRepository_Logout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserRepository_Logout_Call) RunAndReturn(run func()) *MockUserRepository_Logout_Call {
	_c.Run(run)
	return _c
}

// NewAccount provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) NewAccount() {
	_mock.Called()
	return
}

// MockUserRepository_NewAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewAccount'
type MockUserRepository_NewAccount_Call struct {
	*mock.Call
}

// NewAccount is a helper method to define mock.On call
func (_e *MockUserRepository_Expecter) NewAccount() *MockUserRepository_NewAccount_Call {
	return &MockUserRepository_NewAccount_Call{Call: _e.mock.On("NewAccount")}
}

func (_c *MockUserRepository_NewAccount_Call) Run(run func()) *MockUserRepository_NewAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserRepository_NewAccount_Call) Return() *MockUserRepository_NewAccount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserRepository_NewAccount_Call) RunAndReturn(run func()) *MockUserRepository_NewAccount_Call {
	_c.Run(run)
	return _c
}
