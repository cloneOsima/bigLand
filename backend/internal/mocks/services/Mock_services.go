// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package services

import (
	"context"

	"github.com/cloneOsima/bigLand/backend/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPostService creates a new instance of MockPostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostService {
	mock := &MockPostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostService is an autogenerated mock type for the PostService type
type MockPostService struct {
	mock.Mock
}

type MockPostService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostService) EXPECT() *MockPostService_Expecter {
	return &MockPostService_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function for the type MockPostService
func (_mock *MockPostService) CreatePost(ctx context.Context, inputValue *models.Post) error {
	ret := _mock.Called(ctx, inputValue)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Post) error); ok {
		r0 = returnFunc(ctx, inputValue)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostService_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type MockPostService_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - inputValue *models.Post
func (_e *MockPostService_Expecter) CreatePost(ctx interface{}, inputValue interface{}) *MockPostService_CreatePost_Call {
	return &MockPostService_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, inputValue)}
}

func (_c *MockPostService_CreatePost_Call) Run(run func(ctx context.Context, inputValue *models.Post)) *MockPostService_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.Post
		if args[1] != nil {
			arg1 = args[1].(*models.Post)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostService_CreatePost_Call) Return(err error) *MockPostService_CreatePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostService_CreatePost_Call) RunAndReturn(run func(ctx context.Context, inputValue *models.Post) error) *MockPostService_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostInfo provides a mock function for the type MockPostService
func (_mock *MockPostService) GetPostInfo(ctx context.Context, postID string) (*models.Post, error) {
	ret := _mock.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostInfo")
	}

	var r0 *models.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Post, error)); ok {
		return returnFunc(ctx, postID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Post); ok {
		r0 = returnFunc(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostService_GetPostInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostInfo'
type MockPostService_GetPostInfo_Call struct {
	*mock.Call
}

// GetPostInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - postID string
func (_e *MockPostService_Expecter) GetPostInfo(ctx interface{}, postID interface{}) *MockPostService_GetPostInfo_Call {
	return &MockPostService_GetPostInfo_Call{Call: _e.mock.On("GetPostInfo", ctx, postID)}
}

func (_c *MockPostService_GetPostInfo_Call) Run(run func(ctx context.Context, postID string)) *MockPostService_GetPostInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostService_GetPostInfo_Call) Return(post *models.Post, err error) *MockPostService_GetPostInfo_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockPostService_GetPostInfo_Call) RunAndReturn(run func(ctx context.Context, postID string) (*models.Post, error)) *MockPostService_GetPostInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetPosts provides a mock function for the type MockPostService
func (_mock *MockPostService) GetPosts(ctx context.Context) ([]*models.Posts, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 []*models.Posts
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*models.Posts, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*models.Posts); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Posts)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostService_GetPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPosts'
type MockPostService_GetPosts_Call struct {
	*mock.Call
}

// GetPosts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPostService_Expecter) GetPosts(ctx interface{}) *MockPostService_GetPosts_Call {
	return &MockPostService_GetPosts_Call{Call: _e.mock.On("GetPosts", ctx)}
}

func (_c *MockPostService_GetPosts_Call) Run(run func(ctx context.Context)) *MockPostService_GetPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPostService_GetPosts_Call) Return(postss []*models.Posts, err error) *MockPostService_GetPosts_Call {
	_c.Call.Return(postss, err)
	return _c
}

func (_c *MockPostService_GetPosts_Call) RunAndReturn(run func(ctx context.Context) ([]*models.Posts, error)) *MockPostService_GetPosts_Call {
	_c.Call.Return(run)
	return _c
}
