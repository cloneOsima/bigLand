// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getPostInfo = `-- name: GetPostInfo :one
SELECT post_id, content, incident_date, posted_date, address_text, latitude, longtitude, location
FROM posts
WHERE is_active = true
AND post_id = $1
`

type GetPostInfoRow struct {
	PostID       uuid.UUID
	Content      string
	IncidentDate pgtype.Date
	PostedDate   time.Time
	AddressText  string
	Latitude     float64
	Longtitude   float64
	Location     []byte
}

func (q *Queries) GetPostInfo(ctx context.Context, postID uuid.UUID) (GetPostInfoRow, error) {
	row := q.db.QueryRow(ctx, getPostInfo, postID)
	var i GetPostInfoRow
	err := row.Scan(
		&i.PostID,
		&i.Content,
		&i.IncidentDate,
		&i.PostedDate,
		&i.AddressText,
		&i.Latitude,
		&i.Longtitude,
		&i.Location,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT post_id, posted_date, address_text, latitude, longtitude, location
FROM posts
WHERE is_active = true
ORDER BY posted_date DESC
LIMIT 50
`

type GetPostsRow struct {
	PostID      uuid.UUID
	PostedDate  time.Time
	AddressText string
	Latitude    float64
	Longtitude  float64
	Location    []byte
}

func (q *Queries) GetPosts(ctx context.Context) ([]GetPostsRow, error) {
	rows, err := q.db.Query(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsRow
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(
			&i.PostID,
			&i.PostedDate,
			&i.AddressText,
			&i.Latitude,
			&i.Longtitude,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
